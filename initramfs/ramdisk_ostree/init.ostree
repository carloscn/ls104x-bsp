#!/bin/sh
set -eu

# -------------------------------------------

log_info() { echo "[INFO] $0[$$]: $*" >&2; }
log_error() { echo "[ERR] $0[$$]: ERROR $*" >&2; }

do_mount_fs() {
	log_info "mounting FS: $*"
	[[ -e /proc/filesystems ]] && { grep -q "$1" /proc/filesystems || { log_error "Unknown filesystem"; return 1; } }
	[[ -d "$2" ]] || mkdir -p "$2"
	[[ -e /proc/mounts ]] && { grep -q -e "^$1 $2 $1" /proc/mounts && { log_info "$2 ($1) already mounted"; return 0; } }
	mount -t "$1" "$1" "$2"
}

bail_out() {
	log_error "$@"
	log_info "Rebooting..."
	#exec reboot -f
	exec sh
}

get_ostree_sysroot() {
	for opt in $(cat /proc/cmdline); do
		arg=$(echo "$opt" | cut -d'=' -f1)
		if [ "$arg" == "ostree_root" ]; then
			echo "$opt" | cut -d'=' -f2-
			return
		fi
	done
	echo "LABEL=otaroot"
}

export PATH=/sbin:/usr/sbin:/bin:/usr/bin:/usr/lib/ostree

log_info "Starting OSTree initrd script"

do_mount_fs proc /proc
do_mount_fs sysfs /sys
do_mount_fs devtmpfs /dev
do_mount_fs devpts /dev/pts
do_mount_fs tmpfs /dev/shm
do_mount_fs tmpfs /run

# check if smack is active (and if so, mount smackfs)
grep -q smackfs /proc/filesystems && {
	do_mount_fs smackfs /sys/fs/smackfs

	# adjust current label and network label
	echo System >/proc/self/attr/current
	echo System >/sys/fs/smackfs/ambient
}

# a=`/bin/cat /proc/cmdline`
# log_info "the /proc/cmdline is $a"
# # Mount the root filesystem.
# if ! echo $a | /bin/grep -q 'mount=' ; then
#     # set default mount device if mountdev is not set in othbootargs env
#     mountdev=mmcblk0p3
#     # echo Using default mountdev: $mountdev
# else
#     mountdev=`echo $a | /bin/sed -r 's/.*(mount=[^ ]+) .*/\1/'`
#     log_info Using specified mountdev: $mountdev
# fi

# partnum=`echo $mountdev | /usr/bin/awk '{print substr($0,length())}'`
# log_info partnum: $partnum

# MOUNT_R=/sysroot
# mkdir -p ${MOUNT_R}
# if [ $? -ne 0 ];then
#     bail_out "Unable to mkdir -p ${MOUNT_R}, join to console!"
# fi

# /bin/mknod /dev/$mountdev b 179 $partnum && /bin/mount -o rw /dev/$mountdev ${MOUNT_R}
# if [ $? -ne 0 ];then
# 	# The SD card in the R-Car M3 takes a bit of time to come up
# 	# Retry the mount if it fails the first time
# 	log_info "Mounting $ostree_sysroot failed, waiting 5s for the device to be available..."
# 	sleep 5
# 	mount /dev/$mountdev ${MOUNT_R} || bail_out "Unable to mount $ostree_sysroot as physical sysroot"
# fi

MOUNT_R=/sysroot
mkdir -p ${MOUNT_R}
ostree_sysroot=$(get_ostree_sysroot)

mount "$ostree_sysroot" ${MOUNT_R} || {
	# The SD card in the R-Car M3 takes a bit of time to come up
	# Retry the mount if it fails the first time
	log_info "Mounting $ostree_sysroot failed, waiting 5s for the device to be available..."
	sleep 5
	mount "$ostree_sysroot" ${MOUNT_R} || bail_out "Unable to mount $ostree_sysroot as physical sysroot"
}

ls ${MOUNT_R}
if [ $? -ne 0 ];then
    bail_out "No ${MOUNT_R} directory!! reboot device!"
fi

sleep 3

echo "[INFO] current is ubuntu (recovery image), update and switch to primary!"
cd ${MOUNT_R}
ROOTFS_PATH="${MOUNT_R}/ostree/deploy/tcu/deploy"
OSTREE_NEWEST_COMMIT=`ostree admin --sysroot=./ status | grep tcu | head -n1 | sed 's/tcu //g' | tr -d ' '`
ROOTFS_DIR="${ROOTFS_PATH}/${OSTREE_NEWEST_COMMIT}"
log_info "The rootfs real directory is : ${ROOTFS_DIR}"
ls ${ROOTFS_DIR}
if [ $? -ne 0 ];then
    bail_out "No ${MOUNT_R} directory!! reboot device!"
else
    log_info "found a new rootfs!"
fi

MOUNT_P=/newroot
mkdir -p ${MOUNT_P}
mount --bind ${ROOTFS_DIR} ${MOUNT_P}

log_info "Switching to rootfs"
log_info "exec /bin/busybox switch_root ${MOUNT_P} /sbin/init"
exec /bin/busybox switch_root ${MOUNT_P} /sbin/init </dev/console >dev/console 2>&1
sleep 1
bail_out "Failed to switch_root to ${MOUNT_P}"

# setenv bootargs "earlycon=uart8250,mmio,0x21c0500 console=ttyS0,115200 root=/dev/ram0 rw rootfstype=ext4 rootwait rootdelay=2 ostree_root=/dev/mmcblk0p3"
